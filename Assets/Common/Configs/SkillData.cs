
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class SkillData : Luban.BeanBase
{
    public SkillData(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { var __json0 = _buf["skill_type"]; if(!__json0.IsArray) { throw new SerializationException(); } SkillType = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  SkillType.Add(__v0); }   }
        { var __json0 = _buf["cd_time"]; if(!__json0.IsArray) { throw new SerializationException(); } CdTime = new System.Collections.Generic.List<float>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { float __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  CdTime.Add(__v0); }   }
        { var __json0 = _buf["effect_type"]; if(!__json0.IsArray) { throw new SerializationException(); } EffectType = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  EffectType.Add(__v0); }   }
        { var __json0 = _buf["typeDefine"]; if(!__json0.IsArray) { throw new SerializationException(); } TypeDefine = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  TypeDefine.Add(__v0); }   }
        { var __json0 = _buf["prefab_id"]; if(!__json0.IsArray) { throw new SerializationException(); } PrefabId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  PrefabId.Add(__v0); }   }
        { var __json0 = _buf["effect_id"]; if(!__json0.IsArray) { throw new SerializationException(); } EffectId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  EffectId.Add(__v0); }   }
        { var __json0 = _buf["animation_id"]; if(!__json0.IsArray) { throw new SerializationException(); } AnimationId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  AnimationId.Add(__v0); }   }
        { var __json0 = _buf["Windup"]; if(!__json0.IsArray) { throw new SerializationException(); } Windup = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Windup.Add(__v0); }   }
        { var __json0 = _buf["Atking"]; if(!__json0.IsArray) { throw new SerializationException(); } Atking = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Atking.Add(__v0); }   }
        { var __json0 = _buf["Winddown"]; if(!__json0.IsArray) { throw new SerializationException(); } Winddown = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Winddown.Add(__v0); }   }
        { var __json0 = _buf["Lock"]; if(!__json0.IsArray) { throw new SerializationException(); } Lock = new System.Collections.Generic.List<bool>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { bool __v0;  { if(!__e0.IsBoolean) { throw new SerializationException(); }  __v0 = __e0; }  Lock.Add(__v0); }   }
    }

    public static SkillData DeserializeSkillData(JSONNode _buf)
    {
        return new SkillData(_buf);
    }

    /// <summary>
    /// 技能ID
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 技能类型
    /// </summary>
    public readonly System.Collections.Generic.List<int> SkillType;
    public readonly System.Collections.Generic.List<float> CdTime;
    /// <summary>
    /// 1 = 发射系<br/>2 = 范围系
    /// </summary>
    public readonly System.Collections.Generic.List<int> EffectType;
    /// <summary>
    /// 对应的配置
    /// </summary>
    public readonly System.Collections.Generic.List<int> TypeDefine;
    /// <summary>
    /// 发射物的id
    /// </summary>
    public readonly System.Collections.Generic.List<int> PrefabId;
    public readonly System.Collections.Generic.List<int> EffectId;
    /// <summary>
    /// 0为无子弹动画
    /// </summary>
    public readonly System.Collections.Generic.List<int> AnimationId;
    public readonly System.Collections.Generic.List<int> Windup;
    public readonly System.Collections.Generic.List<int> Atking;
    public readonly System.Collections.Generic.List<int> Winddown;
    /// <summary>
    /// 是否锁定
    /// </summary>
    public readonly System.Collections.Generic.List<bool> Lock;
   
    public const int __ID__ = -300302981;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "skillType:" + Luban.StringUtil.CollectionToString(SkillType) + ","
        + "cdTime:" + Luban.StringUtil.CollectionToString(CdTime) + ","
        + "effectType:" + Luban.StringUtil.CollectionToString(EffectType) + ","
        + "typeDefine:" + Luban.StringUtil.CollectionToString(TypeDefine) + ","
        + "prefabId:" + Luban.StringUtil.CollectionToString(PrefabId) + ","
        + "effectId:" + Luban.StringUtil.CollectionToString(EffectId) + ","
        + "animationId:" + Luban.StringUtil.CollectionToString(AnimationId) + ","
        + "Windup:" + Luban.StringUtil.CollectionToString(Windup) + ","
        + "Atking:" + Luban.StringUtil.CollectionToString(Atking) + ","
        + "Winddown:" + Luban.StringUtil.CollectionToString(Winddown) + ","
        + "Lock:" + Luban.StringUtil.CollectionToString(Lock) + ","
        + "}";
    }
}

}
